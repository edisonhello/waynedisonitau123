#include <bits/stdc++.h>
using namespace std;

int dx[] = {1, 0, -1, 0};
int dy[] = {0, 1, 0, -1};

int solve(vector<string> mp) {
  vector<pair<int, int>> at;
  int n = mp.size(), m = mp[0].size();

  for (int i = 0; i < n; ++i) for (int j = 0; j < m; ++j) if (mp[i][j] == '1') at.emplace_back(i, j);

  for (int z = 0; z < 50000; ++z) {
    int d = rand() & 3;
    for (auto &[x, y] : at) {
      int nx = x + dx[d];
      int ny = y + dy[d];
      if (nx < 0 || ny < 0 || nx >= n || ny >= m) continue;
      if (mp[nx][ny] == '0') continue;
      x = nx, y = ny;
    }
    sort(at.begin(), at.end());
    at.resize(unique(at.begin(), at.end()) - at.begin());

    if (at.size() == 1u) {
      return 1;
    }
  }
  return 0;
}

void Validate(vector<string> mp) {
  srand(time(0) * clock());

  int cnt = 0, ac = 0;
  while (true) {
    int res = solve(mp);

    ++cnt;
    ac += res;

    cerr << (double)ac / cnt << " cnt: " << cnt << endl;
  }
}

int main() {
  vector<string> map{
    "01111101111101110111",
    "11010011010011010101",
    "10110110110110110101",
    "01101101101101101101",
    "11011011011011011011",
    "10110110110110110110",
    "11101101101101101101",
    "10011011011011011001",
    "10110110110110110111",
    "01101101101101101101",
    "11011011011011011011",
    "10110110110110110110",
    "11101101101101101101",
    "10011011011011011001",
    "10110110110110110111",
    "01101101101101101101",
    "11011011011011011001",
    "10110110110110110111",
    "10100101100101100100",
    "11110111011111011111"
  };

  cout << map.size() << ' ' << map[0].size() << endl;
  for (auto s : map) cout << s << '\n';

  // Validate(map);
}

#ifdef COMPILE_ERROR

  vector<string> map{
    "11111111111111111101",
    "10000000000000000001",
    "10111111111111111111",
    "10000000000000000001",
    "11111111111111111101",
    "10000000000000000001",
    "10111111111111111111",
    "10000000000000000001",
    "11111111111111111101",
    "10000000000000000001",
    "11111111111111111111",
    "10000000000000000001",
    "11111111111111111101",
    "10000000000000000001",
    "10111111111111111111",
    "10000000000000000001",
    "11111111111111111101",
    "10000000000000000001",
    "10111111111111111111",
    "10000000000000000001"
  }; 0% WA

  vector<string> map{
    "11111111111111111111",
    "10000000000000000000",
    "11111111111111111111",
    "00000000000000000001",
    "11111111111111111111",
    "10000000000000000000",
    "11111111111111111111",
    "00000000000000000001",
    "11111111111111111111",
    "10000000000000000000",
    "11111111111111111111",
    "00000000000000000001",
    "11111111111111111111",
    "10000000000000000000",
    "11111111111111111111",
    "00000000000000000001",
    "11111111111111111111",
    "10000000000000000000",
    "11111111111111111111",
    "00000000000000000001"
  }; 15% WA

  vector<string> map{
    "11111111111111111111",
    "10000000000000000000",
    "10111111111111111111",
    "10100000000000000001",
    "10101111111111111101",
    "10101000000000000101",
    "10101011111111110101",
    "10101010000000010101",
    "10101010111111010101",
    "10101010100001010101",
    "10101010100101010101",
    "10101010111101010101",
    "10101010000001010101",
    "10101011111111010101",
    "10101000000000010101",
    "10101111111111110101",
    "10100000000000000101",
    "10111111111111111101",
    "10000000000000000001",
    "11111111111111111111"
  }; 13% WA

  vector<string> map{
    "00000001011111111111",
    "11111111010000000001",
    "10000000010111111111",
    "11111111010100000000",
    "00000001010111111111",
    "11111111010000000001",
    "10000000010111111111",
    "11111111010100000000",
    "00000001010111111111",
    "11111111010000000001",
    "10000000010111111111",
    "11111111010100000000",
    "00000001010111111111",
    "11111111010000000001",
    "10000000010111111111",
    "11111111010100000000",
    "00000001010111111111",
    "11111111010000000001",
    "10000000010111111111",
    "11111111110100000000"
  }; 10% WA

#endif
